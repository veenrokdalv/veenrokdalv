# Generated by Django 4.1 on 2022-08-26 19:06

import apps.accounts.managers
import apps.accounts.validators
import django.contrib.postgres.fields.citext
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('core', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('id', models.BigAutoField(primary_key=True, serialize=False, validators=[apps.accounts.validators.validate_user_id], verbose_name='AccountID')),
                ('username', django.contrib.postgres.fields.citext.CICharField(error_messages={'unique': 'Данное имя пользователя уже занято.'}, max_length=32, unique=True, validators=[apps.accounts.validators.validate_username], verbose_name='Username')),
                ('first_name', models.CharField(max_length=64, validators=[apps.accounts.validators.validator_first_name], verbose_name='Имя')),
                ('last_name', models.CharField(blank=True, default='', max_length=64, validators=[apps.accounts.validators.validator_last_name], verbose_name='Фамилия')),
                ('is_staff', models.BooleanField(default=False, help_text='Определяет, может ли пользователь войти на этот сайт администратора.', verbose_name='Стату персонала')),
                ('is_active', models.BooleanField(default=True, verbose_name='Aктивирован')),
                ('date_registered', models.DateTimeField(auto_now_add=True, verbose_name='Дата и время регистрации аккаунта')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Пользователь',
                'verbose_name_plural': 'Пользователи',
                'swappable': 'AUTH_USER_MODEL',
            },
            managers=[
                ('objects', apps.accounts.managers.UserManager()),
            ],
        ),
    ]
